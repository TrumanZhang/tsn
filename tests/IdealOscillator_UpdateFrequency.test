%description:
Tests the IdealOscillator submodule

%file: package.ned
package @TESTNAME@;
@namespace(@TESTNAME@);

%file: test.ned
package @TESTNAME@;

import nesting.common.time.IdealOscillator;

network Test
{
    @display("bgb=280,213");
    submodules:
        oscillator: IdealOscillator {
            @display("p=87,103");
        }
        testIdealOscillator: TestIdealOscillator {
            @display("p=182.70667,102.24");
        }
}

%file: TestIdealOscillator.ned
package @TESTNAME@;

simple TestIdealOscillator
{
    parameters:
        string oscillatorModule = default("^.oscillator");
}


%file: TestIdealOscillator.h
#ifndef __@TESTNAME@_TestIdealOscillator_H_
#define __@TESTNAME@_TestIdealOscillator_H_

#include <omnetpp.h>

#include "nesting/common/time/IOscillator.h"
#include "nesting/common/time/IOscillatorListener.h"
#include "nesting/common/time/IdealOscillator.h"

using namespace omnetpp;
using namespace nesting;

namespace @TESTNAME@ {

class TestIdealOscillator : public cSimpleModule, public IOscillatorListener
{
protected:
    IdealOscillator* oscillator;
    unsigned tickCount = 0;
    simtime_t epsilon = simtime_t(1.0e-12);
protected:
    virtual void initialize() override;
    virtual void finish() override;
public:
    virtual void onOscillatorTick(IOscillator* oscillator, const IOscillatorTick* tick) override;
};

} // namespace @TESTNAME@

#endif

%file: TestIdealOscillator.cc
#include "TestIdealOscillator.h"

#include "inet/common/ModuleAccess.h"

#include <iostream>

namespace @TESTNAME@ {

Define_Module(TestIdealOscillator);

void TestIdealOscillator::initialize()
{
    oscillator = check_and_cast<IdealOscillator*>(getModuleByPath(par("oscillatorModule")));
    // Set frequency to 1Hz
    oscillator->setFrequency(1);
    // Subscribe next 2 ticks
	oscillator->subscribeTick(this, 1);
	oscillator->subscribeTick(this, 2);
}

void TestIdealOscillator::finish()
{
	if (tickCount != 2) {
		throw cRuntimeError("Expected 2 ticks to be scheduled!");
	}
}

void TestIdealOscillator::onOscillatorTick(IOscillator* oscillator, const IOscillatorTick* tick)
{
    Enter_Method("tick");
    tickCount++;
    
    // Invariant: (tickCount == 1) => (simTime() == 1s)
    if (tickCount == 1 && (simTime() - epsilon > simtime_t(1.0) || simTime() + epsilon < simtime_t(1.0))) {
    	throw cRuntimeError("Tick #1 must be scheduled within the range [1.0 - epsilon, 1.0 + epsilon]!");
    }
    
    // Invariant: (tickCount == 2) => (simTime() == 1.5s)
    if (tickCount == 2 && (simTime() - epsilon > simtime_t(1.5) || simTime() + epsilon < simtime_t(1.5))) {
    	throw cRuntimeError("Tick #2 must be scheduled within the range [1.5 - epsilon, 1.5 + epsilon]!");
    }
    
    // Change frequency to 2Hz. Now ticks should be scheduled after 0.5s.
    if (tickCount == 1) {
    	oscillator->setFrequency(2);
    }
}

} // namespace @TESTNAME@

%inifile: omnetpp.ini
[General]
network = Test
sim-time-limit = 3s

%exitcode: 0