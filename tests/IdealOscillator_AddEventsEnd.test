%description:
Tests the IdealOscillator submodule

%file: package.ned
package @TESTNAME@;
@namespace(@TESTNAME@);

%file: test.ned
package @TESTNAME@;

import nesting.common.time.IdealOscillator;

network Test
{
    @display("bgb=280,213");
    submodules:
        oscillator: IdealOscillator {
            @display("p=87,103");
        }
        testIdealOscillator: TestIdealOscillator_AddTicksEnd {
            @display("p=182.70667,102.24");
        }
}

%file: TestIdealOscillator_AddTicksEnd.ned
package @TESTNAME@;

simple TestIdealOscillator_AddTicksEnd
{
    parameters:
        string oscillatorModule = default("^.oscillator");
}


%file: TestIdealOscillator_AddTicksEnd.h
#ifndef __TestIdealOscillator_AddTicksEnd_H_
#define __TestIdealOscillator_AddTicksEnd_H_

#include <omnetpp.h>

#include "nesting/common/time/IOscillator.h"
#include "nesting/common/time/IOscillatorListener.h"
#include "nesting/common/time/IdealOscillator.h"

using namespace omnetpp;
using namespace nesting;

namespace @TESTNAME@ {

class TestIdealOscillator_AddTicksEnd : public cSimpleModule, public IOscillatorListener
{
protected:
    IdealOscillator* oscillator;
    unsigned tickCount = 0;
protected:
    virtual void initialize() override;
    virtual void finish() override;
public:
    virtual void onTick(IOscillator* oscillator, uint64_t kind) override;
};

} // namespace @TESTNAME@

#endif

%file: TestIdealOscillator_AddTicksEnd.cc
#include "TestIdealOscillator_AddTicksEnd.h"

#include "inet/common/ModuleAccess.h"

#include <iostream>

namespace @TESTNAME@ {

Define_Module(TestIdealOscillator_AddTicksEnd);

void TestIdealOscillator_AddTicksEnd::initialize()
{
    oscillator = check_and_cast<IdealOscillator*>(getModuleByPath(par("oscillatorModule")));
    oscillator->subscribeTick(this, 0);
}

void TestIdealOscillator_AddTicksEnd::finish()
{
	if (tickCount != 10) {
		throw cRuntimeError("Expected 10 ticks to be scheduled!");
	}
}

void TestIdealOscillator_AddTicksEnd::onTick(IOscillator* oscillator, uint64_t kind)
{
    Enter_Method("tick");
    EV_INFO << "Tick #" << this->oscillator->getCurrentTick() << " of kind " << kind << std::endl;
    
    tickCount++;
    EV_INFO << "Local tick count: " << tickCount << std::endl;
    
    kind++;
    if (kind < 10) {
    	oscillator->subscribeTick(this, 0, kind);	
  	}
}

} // namespace @TESTNAME@

%inifile: omnetpp.ini
[General]
network = Test
sim-time-limit = 1ms
record-eventlog = true

%exitcode: 0